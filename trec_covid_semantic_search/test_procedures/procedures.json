{
    "name": "create-index-ingest-data-search",
    "description": "Indexes the whole document corpus using OpenSearch default settings. After that several query groups are run.",
    "default": true,
    "schedule": [
        {
          "name": "cluster-settings",
          "operation": {
            "operation-type": "put-settings",
            "body": {
              "persistent": {
                "plugins": {
                  "ml_commons": {
                    "only_run_on_ml_node": "{{only_run_on_ml_node | default('false')}}",
                    "native_memory_threshold": "100",
                    "allow_registering_model_via_local_file": "true",
                    "allow_registering_model_via_url": "true"
                  }
                }
              }
            }
          }
        },
        {
          "operation": "delete-index"
        },
        {
          "name": "set-concurrent-segment-search",
          "operation": {
            "operation-type": "update-concurrent-segment-search-settings",
            "enabled": "{{concurent_segment_search_enabled | default('false')}}",
            "max_slice_count": "{{max_slice_count | default(0)}}"
          }
        },
        {
          "operation": "delete-ingest-pipeline"
        },
        {{ benchmark.collect(parts="common/redeploy_local_model.json") }},
        {
          "operation": "create-ingest-pipeline"
        },
        {
            "operation": {
              "operation-type": "create-index",
              "settings": {%- if index_settings is defined %} {{index_settings | tojson}} {%- else %} {
                "index.number_of_shards": {{number_of_shards | default(3)}},
                "index.number_of_replicas": {{number_of_replicas | default(0)}},
                "index.store.type": "{{store_type | default('fs')}}"
              }{%- endif %}
            }
        },
        {
            "name": "check-cluster-health-before-index-creation",
            "operation": {
              "operation-type": "cluster-health",
              "index": "trec-covid",
              "request-params": {
                "wait_for_status": "{{cluster_health | default('green')}}",
                "wait_for_no_relocating_shards": "true"
              },
              "retry-until-success": true
            }
        },
        {
          "operation": "index-append",
          "warmup-time-period": 60,
          "clients": {{bulk_indexing_clients | default(1)}},
          "ignore-response-error-level": "{{error_level | default('non-fatal')}}"
        },
        {
            "name": "refresh-after-index-created",
            "operation": "refresh"
        },
        {
          "operation": {
            "operation-type": "force-merge",
            "request-timeout": 7200{%- if force_merge_max_num_segments is defined %},
            "max-num-segments": {{ force_merge_max_num_segments | tojson }}
            {%- endif %}
          }
        },
        {
          "name": "refresh-after-force-merge",
          "operation": "refresh"
        },
        {
          "name": "wait-until-merges-finish",
          "operation": {
            "operation-type": "index-stats",
            "index": "_all",
            "condition": {
              "path": "_all.total.merges.current",
              "expected-value": 0
            },
            "retry-until-success": true,
            "include-in-reporting": false
          }
        },
        {
          "operation": "default",
          "warmup-iterations": {{warmup_iterations | default(500) | tojson}},
          "iterations": {{iterations | default(500) | tojson }},
          "target-throughput": {{ target_throughput | default(100) | tojson}},
          "clients": {{ search_clients | default(1) }}
        },
        {
          "operation": "create-normalization-processor-no-weights-search-pipeline"
        },
        {{ benchmark.collect(parts="common/semantic-search-queries.json") }}
    ]
},
{
  "name": "search",
  "description": "Run semantic search work.",
  "default": false,
  "schedule": [
    {{ benchmark.collect(parts="common/redeploy_local_model.json") }},
    {
      "operation": "create-normalization-processor-no-weights-search-pipeline"
    },
    {{ benchmark.collect(parts="common/semantic-search-queries.json") }}
  ]
}